<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Event List - Admin Page</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500&family=Lora:wght@600;700&display=swap" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet" />
  <link href="css/admin-style.css" rel="stylesheet" />
  <style>
    /* General Styling */
    body {
      font-family: 'Open Sans', sans-serif;
      background-color: #f4f7fc;
      margin: 0;
      padding: 0;
      color: #333;
    }

    .navigation {
      padding: 20px 30px;
      background-color: #2c3e50;
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .navigation button {
      background-color: #34495e;
      color: white;
      border: none;
      padding: 8px 16px;
      font-size: 14px;
      cursor: pointer;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .navigation button:hover {
      background-color: #1abc9c;
    }

    .eventlist-container {
      margin: 100px 0px;
      padding: 20px;
      border-radius: 12px;
      width: 90%;
      max-width: 1000px;
    }

    h2 {
      font-size: 24px;
      color: #2c3e50;
      margin-bottom: 20px;
      font-family: 'Lora', serif;
    }

    /* CSS Grid for event list */
    #eventList {
      display: grid;
      grid-template-columns: repeat(8, 1fr); /* 8 columns */
      grid-gap: 20px;
      margin-bottom: 40px;
    }

    .event-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 15px;
      background-color: #ffffff;
      border-radius: 8px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease;
      text-align: center;
    }

    .event-item:hover {
      background-color: #f9f9f9;
      transform: scale(1.02);
    }

    .event-item .info h3 {
      margin: 0;
      font-size: 16px;
      color: #2c3e50;
    }

    .event-item .info p {
      margin: 5px 0;
      color: #7f8c8d;
      font-size: 14px;
    }

    .event-item .action-buttons {
      display: flex;
      justify-content: space-around;
      margin-top: 10px;
      gap: 10px;
    }

    .action-buttons button {
      background-color: #87bcdf;
      color: white;
      border: none;
      padding: 10px 10px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .action-buttons button:hover {
      background-color: #2980b9;
    }

    /* Pagination Style */
    .pagination {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 30px;
      width: 100%;
    }

    .pagination button {
      background-color: black;
      color: white;
      border: none;
      padding: 8px 16px;
      font-size: 14px;
      cursor: pointer;
      border-radius: 5px;
    }

    .pagination button:hover {
      background-color: #1abc9c;
    }
    .info{
      height:140px;
    }
    .search-bar {
      margin-bottom: 20px;
      display: flex;
      justify-content: center;
  }
  
  #searchInput {
      width: 90%;
      max-width: 600px;
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
      outline: none;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  #searchInput:focus {
      border-color: #1abc9c;
  }
  </style>
</head>
<body>
    <%- include('admin-head') -%>
  
    <div class="eventlist-container">
        <h2>Event List</h2>
        <div class="search-bar">
          <input type="text" id="searchInput" placeholder="Search events by name..." oninput="searchEvents()" />
      </div>
      
        <div id="eventListContainer">
            <div id="eventList">
                <% events.forEach(event => { %>
                    <div class="event-item">
                        <div class="info">
                            <h3><%= event.name %></h3>
                            <p><strong>Date:</strong> <%= event.date %></p>
                            <p><strong>Status:</strong> <%= event.status %></p>

                        </div>
                        <div class="action-buttons">
                            <button onclick="editEvent('<%= event._id %>')">Edit</button>
                            <button onclick="deleteEvent('<%= event._id %>')">Delete</button>
                        </div>
                    </div>
                <% }) %>
            </div>
  
            <div class="pagination">
                <button id="prevPage" onclick="loadPage('<%= currentPage - 1 %>')" 
                        <%= !hasPrevPage ? 'disabled' : '' %>>
                    Previous
                </button>
                
                <span>Page <%= currentPage %> of <%= totalPages %></span>
                
                <button id="nextPage" onclick="loadPage('<%= currentPage + 1 %>')"
                        <%= !hasNextPage ? 'disabled' : '' %>>
                    Next
                </button>
            </div>
        </div>
    </div>

    <<script>
        async function loadPage(pageNumber) {
            const eventList = document.getElementById('eventList');
            
            try {
                console.log('Loading page:', pageNumber);
                // Hiển thị loading state
                eventList.style.opacity = '0.5';
                
                const response = await fetch(`/adminPage-eventlist?page=${pageNumber}`, {
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
    
                console.log('Response status:', response.status);
    
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Server error response:', errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
    
                const data = await response.json();
                console.log('Received data:', data);
    
                if (!data.events) {
                    console.error('Invalid data format:', data);
                    throw new Error('Invalid data format received from server');
                }
                
                // Cập nhật danh sách sự kiện
                const eventListHTML = data.events.map(event => `
                    <div class="event-item">
                        <div style="height:180px" class="info">
                            <h3>${event.name || 'Untitled'}</h3>
                            <p><strong>Date:</strong> ${event.date || 'N/A'}</p>
                            <p><strong>Status:</strong> ${event.status || 'N/A'}</p>
                        </div>
                        <div class="action-buttons">
                            <button onclick="editEvent('${event._id}')">Edit</button>
                            <button onclick="deleteEvent('${event._id}')">Delete</button>
                        </div>
                    </div>
                `).join('');
                
                eventList.innerHTML = eventListHTML;
                
                // Cập nhật pagination
                const pagination = document.querySelector('.pagination');
                pagination.innerHTML = `
                    <button id="prevPage" onclick="loadPage(${data.currentPage - 1})" 
                            ${!data.hasPrevPage ? 'disabled' : ''}>
                        Previous
                    </button>
                    
                    <span>Page ${data.currentPage} of ${data.totalPages}</span>
                    
                    <button id="nextPage" onclick="loadPage(${data.currentPage + 1})"
                            ${!data.hasNextPage ? 'disabled' : ''}>
                        Next
                    </button>
                `;
                
                // Cập nhật URL
                history.pushState({page: pageNumber}, '', `?page=${pageNumber}`);
                
            } catch (error) {
                console.error('Detailed error:', error);
                alert(`Error loading events: ${error.message}. Please check console for details.`);
            } finally {
                // Xóa loading state
                eventList.style.opacity = '1';
            }
        }
    
        // Xử lý nút Back/Forward của trình duyệt
        window.onpopstate = function(event) {
            const urlParams = new URLSearchParams(window.location.search);
            const page = parseInt(urlParams.get('page')) || 1;
            loadPage(page);
        };
        function searchEvents() {
          const searchInput = document.getElementById('searchInput').value.toLowerCase();
          const eventItems = document.querySelectorAll('.event-item');
      
          eventItems.forEach(eventItem => {
              const eventName = eventItem.querySelector('.info h3').textContent.toLowerCase();
              if (eventName.includes(searchInput)) {
                  eventItem.style.display = 'block';
              } else {
                  eventItem.style.display = 'none';
              }
          });
      }
      
    </script>
</body>
</html>
